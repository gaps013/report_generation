from typing import Any, List, Optional

from fvcore.common.config import CfgNode as CN


class Config(object):
    r"""
    This class provides package-wide configuration management. It is a
    nested dict-like structure with nested keys accessible as attributes. It
    contains sensible default values, which can be modified by (first) a YAML
    file and (second) a list of attributes and values.

    An instantiated object is immutable: modifying any attribute is illegal.
    You must override required parameter values either through ``config_file``
    or ``override_list`` arguments. For adding more parameters at runtime
    (based on existing parameters), modify :meth:`add_derived_params`.

    Parameters
    ----------
    config_file: str
        Path to a YAML file containing configuration parameters to override.
    config_override: List[Any], optional (default = [])
        A list of sequential attributes and values of parameters to override.
        This happens after overriding from YAML file.

    Examples
    --------
    Let a YAML file named "config.yaml" specify these parameters to override::

        OPTIM:
          BATCH_SIZE: 512
          LR: 0.01

    >>> _C = Config("config.yaml", ["OPTIM.BATCH_SIZE", 1024])
    >>> _C.LR  # default: 0.001
    0.01
    >>> _C.OPTIM.BATCH_SIZE  # default: 256, file: 512
    1024
    """

    def __init__(
        self, config_file: Optional[str] = None, override_list: List[Any] = []
    ):
        _C = CN()
        _C.VALID_IMAGES = ['8a4e1705-f30d7e1d-dd1ef999-a8521d7e-e64ad0c9.jpg.npy', '6660e8d2-6381a94a-843d96da-11713488-59a660eb.jpg.npy',
                           '8a4e1705-f30d7e1d-dd1ef999-a8521d7e-e64ad0c9.jpg.npy', '865486e4-6d43765f-e1cebccc-d80670c5-b9aeea25.jpg.npy',
                           '35ab1e49-b049f284-ba901484-a52ba49e-053d2c10.jpg.npy', 'f3d88efb-8d1f70db-a2131320-90053712-cfd9a1bd.jpg.npy',
                           'c5937742-fb73ee63-48b37017-9cc947e5-fa8342d4.jpg.npy', 'b3ce45dc-111ceca0-bab01f71-9b22033a-ae9705dd.jpg.npy',
                           '6660e8d2-6381a94a-843d96da-11713488-59a660eb.jpg.npy', '4fc9abbd-f405ecdb-ca896442-413d67c8-928fe3c4.jpg.npy']

        # Random seed for NumPy and PyTorch, important for reproducibility.
        _C.RANDOM_SEED = 42
        # Opt level for mixed precision training using NVIDIA Apex. This can be
        # one of {0, 1, 2}. Refer NVIDIA Apex docs for their meaning.
        _C.FP16_OPT = 2

        # Path to the dataset root, which structure as per README. Path is
        # assumed to be relative to project root.
        _C.TRAIN_IMAGE_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/JPG_DataSet_Split/Without_Preprocessing_Reports/Train_Features_Extracted"
        _C.TRAIN_JSON_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/MIMIC_CXR_Reports/Report_CSV_Files/no_missing_train.json"
        _C.VALID_IMAGE_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/JPG_DataSet_Split/Without_Preprocessing_Reports/Valid_Features_Extracted"
        _C.VALID_JSON_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/MIMIC_CXR_Reports/Report_CSV_Files/no_missing_valid.json"
        _C.TEST_IMAGE_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/JPG_DataSet_Split/Without_Preprocessing_Reports/Test_Images"
        _C.TEST_JSON_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/MIMIC_CXR_Reports/Report_CSV_Files/no_missing_test.json"
        _C.PRETRAINED_EMDEDDING = False
        # Path to .vocab file generated by ``sentencepiece``.
        _C.VOCAB_FILE_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/JPG_DataSet_Split/Vocab/Vocab.vocab"
        # Path to .model file generated by ``sentencepiece``.
        _C.VOCAB_MODEL_PATH = "/netscratch/gsingh/MIMIC_CXR/DataSet/JPG_DataSet_Split/Vocab/Vocab.model"
        _C.VOCAB_SIZE = 10000
        _C.EPOCHS = 1024
        _C.BATCH_SIZE = 650
        _C.TEST_BATCH_SIZE = 100
        _C.ITERATIONS_PER_EPOCHS = 1
        _C.WEIGHT_DECAY = 1e-5
        _C.NUM_LABELS = 41
        _C.IMAGE_SIZE = 299
        _C.MAX_SEQUENCE_LENGTH = 150
        _C.DROPOUT_RATE = 0.1
        _C.D_HEAD = 64
        _C.N_HEAD = 12
        _C.TRAIN_DATASET_LENGTH = 25000
        _C.INFERENCE_TIME = False
        _C.COMBINED_N_LAYERS = 1
        _C.BEAM_SIZE = 3
        _C.PADDING_INDEX = 0
        _C.EOS_INDEX = 0
        _C.SOS_INDEX = 0
        _C.EXTRACTED_FEATURES = True
        _C.IMAGE_MODEL_PATH = '/netscratch/gsingh/MIMIC_CXR/Results/Image_Feature_Extraction/MIMIC_CXR_No_ES/model.pth'

        _C.EMBEDDING_DIM = 768
        _C.CONTEXT_SIZE = 768
        _C.LR_COMBINED = 1e-3
        _C.MAX_LR = 1e-1
        _C.SAVED_DATASET = False
        INIT_PATH = '/netscratch/gsingh/MIMIC_CXR/Results/Modified_Transformer/Complete_mimic_dataset/'
        _C.SAVED_DATASET_PATH_TRAIN = INIT_PATH+'DataSet/train_dataloader.pth'
        _C.SAVED_DATASET_PATH_VAL = INIT_PATH+'DataSet/val_dataloader.pth'
        _C.SAVED_DATASET_PATH_TEST = INIT_PATH+'DataSet/test_dataloader.pth'

        _C.CHECKPOINT_PATH = INIT_PATH+'CheckPoints'
        _C.MODEL_PATH = INIT_PATH+'combined_model.pth'
        _C.MODEL_STATE_DIC = INIT_PATH+'combined_model_state_dic.pth'
        _C.FIGURE_PATH = INIT_PATH+'Graphs'
        _C.CSV_PATH = INIT_PATH
        _C.TEST_CSV_PATH = INIT_PATH+'test_output_image_feature_input.csv'
        self._C = _C
        if config_file is not None:
            self._C.merge_from_file(config_file)
        self._C.merge_from_list(override_list)

        self.add_derived_params()

        # Make an instantiated object of this class immutable.
        self._C.freeze()

    def add_derived_params(self):
        r"""Add parameters with values derived from existing parameters."""

        # We don't have any such cases so far.
        pass

    def dump(self, file_path: str):
        r"""Save config at the specified file path.

        Parameters
        ----------
        file_path: str
            (YAML) path to save config at.
        """
        self._C.dump(stream=open(file_path, "w"))

    def __getattr__(self, attr: str):
        return self._C.__getattr__(attr)

    def __str__(self):
        return self._C.__str__()

    def __repr__(self):
        return self._C.__repr__()
